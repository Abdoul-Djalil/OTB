#!/bin/sh

DIRNAME_0=$(dirname "$0")
cd  "$DIRNAME_0" || exit 1

# NOTE: $OUT_DIR is also used in make_sylinks script (see below)
# Avoid any pre-mature optimization on variable names here.

OUT_DIR=$(pwd)

# find install_name_tool
INSTALL_NAME_TOOL=$(which install_name_tool)
if [ -z "$INSTALL_NAME_TOOL" ]; then
    echo "install_name_tool does not exists.."
    echo "please install install_name_tool and make sure it can be found from PATH"
    exit 1;
fi

# no interference with DYLD_LIBRARY_PATH and DYLD_FALLBACK_LIBRARY_PATH
unset DYLD_LIBRARY_PATH
unset DYLD_FALLBACK_LIBRARY_PATH

echo "Configuring..."
LIBRARY_FILES=$(find "$OUT_DIR/lib" -maxdepth 1 -type f)
EXE_FILES=$(find "$OUT_DIR/bin"  -type f -exec file {} \; | grep -i "Mach-O*.*executable"|cut -d ':' -f1)
# run install_name_tool
for lib_file in $LIBRARY_FILES $EXE_FILES; do
    #echo "adding rpath to $OUT_DIR/$lib_file"

    if [ -f "$lib_file" ]; then
	lib_file_TYPE=$(file "$lib_file" |cut -d ':' -f2)
	
	match_type="ar archive"
	if test "${lib_file_TYPE#*$match_type}" != "$lib_file_TYPE" ; then
	    continue;
	fi
      lib_file_original_rpaths=$(otool -l "$lib_file" | grep -A 3 "LC_RPATH" | grep -oE 'path .* \(offset' | cut -d ' ' -f 2)
      for original_rpath in $lib_file_original_rpaths; do
        $INSTALL_NAME_TOOL "-delete_rpath" "$original_rpath" "$lib_file"
      done
      $INSTALL_NAME_TOOL "-add_rpath" "$OUT_DIR/lib" "$lib_file"
    fi
done

OTB_APP_FILES=$(find "$OUT_DIR/lib/otb/applications" -maxdepth 1 -type f)
# run install_name_tool
for app_file in $OTB_APP_FILES; do
    #echo "adding rpath to $app_file"
    if [ -f "$app_file" ]; then
        $INSTALL_NAME_TOOL "-rpath" "@ORIGINAL_RPATH_TO_REPLACE@" "$OUT_DIR/lib" "$app_file"
    fi
done
if [ -f "$OUT_DIR/lib/python/_otbApplication.so" ]; then
    $INSTALL_NAME_TOOL "-rpath" "@ORIGINAL_RPATH_TO_REPLACE@" "$OUT_DIR/lib" "$OUT_DIR/lib/python/_otbApplication.so"
fi

rm -fr "Mapla.app"
rm -fr "Monteveridi.app"

cp -r template.app Mapla.app
cp -r template.app Monteverdi.app

mv mapla.sh Mapla.app/Contents/MacOS/Mapla
mv monteverdi.sh Monteverdi.app/Contents/MacOS/Monteverdi

rm -fr "template.app"


cat > "$OUT_DIR/bin/qt.conf" << EOF
[Paths]
Translations=$OUT_DIR/lib/qt4/translations
Plugins=$OUT_DIR/lib/qt4/plugins
EOF

LONG_VERSION_STRING=@Monteverdi_VERSION_MAJOR@.@Monteverdi_VERSION_MINOR@.@Monteverdi_VERSION_PATCH@
SHORT_VERSION_STRING=@Monteverdi_VERSION_MAJOR@.@Monteverdi_VERSION_MINOR@

cp "$OUT_DIR/Monteverdi.icns" "Monteverdi.app/Contents/Resources/"
cp "$OUT_DIR/Monteverdi.icns" "Mapla.app/Contents/Resources/"

sed -i "" "s,STARTUP_FILE,Mapla,g" "Mapla.app/Contents/Info.plist"
sed -i "" "s,LONG_VERSION,$LONG_VERSION_STRING,g" "Mapla.app/Contents/Info.plist"
sed -i "" "s,SHORT_VERSION,$SHORT_VERSION_STRING,g" "Mapla.app/Contents/Info.plist"
sed -i -E "s,OUT_DIR,$OUT_DIR,g" "$OUT_DIR/Mapla.app/Contents/MacOS/Mapla"

sed -i "" "s,STARTUP_FILE,Monteverdi,g" "Monteverdi.app/Contents/Info.plist"
sed -i "" "s,LONG_VERSION,$LONG_VERSION_STRING,g" "Monteverdi.app/Contents/Info.plist"
sed -i "" "s,SHORT_VERSION,$SHORT_VERSION_STRING,g" "Monteverdi.app/Contents/Info.plist"
sed -i -E "s,OUT_DIR,$OUT_DIR,g" "$OUT_DIR/Monteverdi.app/Contents/MacOS/Monteverdi"

cp "$OUT_DIR/bin/qt.conf" "$OUT_DIR/Mapla.app/Contents/Resources/qt.conf"
cp "$OUT_DIR/bin/qt.conf" "$OUT_DIR/Monteverdi.app/Contents/Resources/qt.conf"

chmod +x "$OUT_DIR/Mapla.app/Contents/MacOS/Mapla"
chmod +x "$OUT_DIR/Monteverdi.app/Contents/MacOS/Monteverdi"

sed -i -E "s,OUT_DIR,$OUT_DIR,g" "$OUT_DIR/otbenv.profile"
chmod +x "$OUT_DIR/otbenv.profile"

#fi
















if [ "$I_AM_XDK" = true ] ; then
cat > "$OUT_DIR/xdkenv.profile" << EOF
#!/bin/sh

# The below environment variables only affect current shell
# So if you run again from a terminal. you need to run the script again

# unset any existing LD_LIBRARY_PATH
unset LD_LIBRARY_PATH

# Add bin direcotory to system PATH
PATH=$OUT_DIR/bin:\$PATH

# set numeric locale to C
LC_NUMERIC=C

# set GDAL_DATA variable used by otb application
GDAL_DATA=$OUT_DIR/share/gdal

# set GEOTIFF_CSV variable used by otb application
GEOTIFF_CSV=$OUT_DIR/share/epsg_csv

CMAKE_PREFIX_PATH=$OUT_DIR

# export variables
export LC_NUMERIC
export GDAL_DATA
export GEOTIFF_CSV
export CMAKE_PREFIX_PATH
export PATH

EOF

chmod +x "$OUT_DIR/xdkenv.profile"

fi


cat > "$OUT_DIR/bin/qt.conf" << EOF
[Paths]
Translations=$OUT_DIR/lib/qt4/translations
Plugins=$OUT_DIR/lib/qt4/plugins
EOF





# echo "Creating symbolic links..."
. "./make_symlinks"
rm -f "$OUT_DIR/make_symlinks"

rm -f "$OUT_DIR/Monteverdi.icns"

open "$OUT_DIR"
